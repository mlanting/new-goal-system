#
# Copyright (c) 2010, Soar Technology, Inc.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# * Neither the name of Soar Technology, Inc. nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without the specific prior written permission of Soar Technology, Inc.
# 
# THIS SOFTWARE IS PROVIDED BY SOAR TECHNOLOGY, INC. AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL SOAR TECHNOLOGY, INC. OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE 
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

##!
# @brief Turn the printing of operators on/off
#
# @type debugging
#
# @devnote usage:  NGS_debug-print-operators on

proc NGS_debug-print-operators { { state "on" } } {
   NGS_reference-soar-vars
   
   # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
   sp "ngs_print*operator
        (state <s> ^operator.name <name>)
     -->
        (write (crlf) |(operator: |<name>|)|)"
        
   if { $state != "on" } {
      catch {excise ngs_print*operator}
   }
}

##!
# @brief Print active considerables.
#
# @type debugging 
#
proc NGS_debug-print-active-considerables { { state "on" } } {
   NGS_reference-soar-vars

   # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
   sp "ngs*print*active*considerable*no-name
        (state <s> ^$active_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        (<con> -^name)
        [NGS_is-most-derived-type <con> <mdt>]
     -->
        (write (crlf) |(active | <ngs_considerable_type> |: | <con> | anonymous (|<mdt>|))|)
     "
    
     sp "ngs*print*active*considerable*name
        (state <s> ^$active_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        [NGS_name <con> <name>]
        [NGS_is-most-derived-type <con> <mdt>]
     -->
        (write (crlf) |(active | <ngs_considerable_type> |: | <con> | | <name>|)|)
     "
     
   if { $state != "on" } {
      catch {excise ngs*print*active*considerable*no-name}
      catch {excise ngs*print*active*considerable*name}
   }
}


##!
# @brief Print achieved considerables
#
# @type debugging

proc NGS_debug-print-achieved-considerables { { state "on" } } {
   NGS_reference-soar-vars

   # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
   sp "ngs*print*achieved*considerable*no-name
        (state <s> ^$terminated_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        (<con> -^name)
        [NGS_is-most-derived-type <con> <mdt>]
        [NGS_is-achieved <con>]
     -->
        (write (crlf) |(achieved | <ngs_considerable_type> |: | <con> | anonymous (|<mdt>|))|)
     "
    
     sp "ngs*print*achieved*considerable*name
        (state <s> ^$terminated_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        [NGS_name <con> <name>]
        [NGS_is-most-derived-type <con> <mdt>]
        [NGS_is-achieved <con>]
     -->
        (write (crlf) |(achieved | <ngs_considerable_type> |: | <con> | | <name>|)|)
     "
     
   if { $state != "on" } {
      catch {excise ngs*print*achieved*considerable*no-name}
      catch {excise ngs*print*achieved*considerable*name}
   }
}

##!
# @brief Print unachievable considerables
#
# @type debugging

proc NGS_debug-print-unachievable-considerables { { state "on" } } {
   NGS_reference-soar-vars
   
   # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
   sp "ngs*print*unachievable*considerable*no-name
        (state <s> ^$terminated_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        (<con> -^name)
        [NGS_is-most-derived-type <con> <mdt>]
        [NGS_is-unachievable <con>]
     -->
        (write (crlf) |(unachievable | <ngs_considerable_type> |: | <con> | anonymous (|<mdt>|))|)
     "
    
     sp "ngs*print*unachievable*considerable*name
        (state <s> ^$terminated_considerables <cons>)
        (<cons> ^<ngs_considerable_type> <con>)
        [NGS_name <con> <name>]
        [NGS_is-most-derived-type <con> <mdt>]
        [NGS_is-unachievable <con>]
     -->
        (write (crlf) |(unachievable | <ngs_considerable_type> |: | <con> | | <name>|)|)
     "
     
   if { $state != "on" } {
      catch {excise ngs*print*unachievable*considerable*no-name}
      catch {excise ngs*print*unachievable*considerable*name}
   }
}

proc NGS_debug-print-timed-out-considerables { { state "on" } } {
   NGS_reference-soar-vars

   # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
   sp "ngs*print-terminated-considerable*remove-on-timeout
        (state <s> ^$terminated_considerables <cons>
                   ^$master_time <time>)
        (<cons>   ^<ngs_considerable_type> <con>)
        [NGS_is-most-derived-type <con> <mdt>]
        [NGS_is-tagged <con> removal-timeout {<= <time>} ]           
     -->
        (write (crlf) |  ...  Removing terminated | <ngs_considerable_type> | due to non-consideration and timeout : | <mdt>)
     "
     
   if { $state != "on" } {
      catch {excise ngs*print-terminated-considerable*remove-on-timeout}
   }
}


proc NGS_debug-print-output { { toggle "on" } } {
  if { $toggle == "on" } {
    sp "foo*watch-output (state <s> ^io.output-link.<something> <something-else>) --> (write (crlf) |OUTPUT seen: | <something> | | <something-else>)"
  } elseif {$toggle == "off"} {
    # to workaround csoar being unhappy when you excise something that doesn't exist, we'll make sure it exists
    sp "foo*watch-output (state <s> ^io.output-link.<something> <something-else>) --> (write (crlf) |OUTPUT seen: | <something> | | <something-else>)"
    catch {excise foo*watch-output}
  } else {
    echo "Invalid option - use NGS_debug-print-output << on off >>"
  }
}


##!
# @Brief Turn on or off -all- possible debug printing 

proc NGS_toggle-debug-printing { { toggle "on" } } {
  echo "Turning $toggle debug printing."

  NGS_debug-print-operators $toggle
  NGS_debug-print-active-considerables $toggle
  NGS_debug-print-achieved-considerables $toggle
  NGS_debug-print-unachievable-considerables $toggle
  NGS_debug-print-timed-out-considerables $toggle
  NGS_debug-print-output $toggle
}

##!
# @brief Print messages as they are sent (with timestamp)
#
# @type debugging
#

variable NGS_NO_DEBUG_PRINTING
  
NGS_ifeq NGS_NO_DEBUG_PRINTING yes "NGS_toggle-debug-printing off"

NGS_ifneq NGS_NO_DEBUG_PRINTING yes "NGS_toggle-debug-printing on"
